data = merge(mutTable, externalBranches[, c('Species', 'BranchLength')], by='Species')
dataMore05 = data[data$BranchLength > 0.05, ]
a = as.data.frame(rootedTree$edge)
a = cbind(a, rootedTree$edge.length)
externalBranches = a[a$V2 <= numberOfSpecies,]
externalBranches = cbind(externalBranches, tree$tip.label)
names(externalBranches) = c('Node', 'Tip', 'BranchLength', 'Species')
data = merge(mutTable, externalBranches[, c('Species', 'BranchLength')], by='Species')
View(mutTable)
View(externalBranches)
View(mutTable)
View(mutTable)
mutTable = cbind(Species, mutTable)
speciesNumber = length(unique(mut$Species))
View(externalBranches)
mutTable = setNames(data.frame(matrix(0, ncol = 12, nrow = speciesNumber)), unique(mut$Subs))
Species = unique(mut$Species)
mutTable = cbind(Species, mutTable)
for(i in 1:nrow(mut)){
row = mut[i, ]
mutTable[mutTable$Species == row$Species, row$Subs] = mutTable[mutTable$Species == row$Species, row$Subs] + 1
}
table(mut[mut$Species == "AUS49_Tumulitermes_sp._1",]$Subs)
data = merge(mutTable, externalBranches[, c('Species', 'BranchLength')], by='Species')
dataMore05 = data[data$BranchLength > 0.05, ]
dataMore02 = data[data$BranchLength > 0.02, ]
View(dataMore02)
a = matrix(0, ncol=12, nrow=speciesNumber)
for(i in 1:12){
a[, i] = dataMore02[, i+1] / dataMore02$BranchLength
}
View(a)
View(dataMore02)
a = matrix(0, ncol=12, nrow=unique(dataMore02$Species))
a = matrix(0, ncol=12, nrow=length(unique(dataMore02$Species)))
for(i in 1:12){
a[, i] = dataMore02[, i+1] / dataMore02$BranchLength
}
View(a)
rates = as.data.frame(a)
names(rates) = sub(' ', '', paste(names(mutTable[, -1]), '_rate'))
subsRates = cbind(data, rates)
subsRates = cbind(dataMore02, rates)
View(dataMore02)
write.table(subsRates, 'results/4foldSubsRatesBrLen02.txt', sep='\t', row.names = FALSE, quote = FALSE)
read.table('results/4foldSubsRatesBrLen02.txt', header=TRUE, sep='\t')
mut = read.table('results/4foldSubsRatesBrLen02.txt', header=TRUE, sep='\t')
View(mut)
plot(mut$C_T, mut$BranchLength)
plot(mut$C_T_rate, mut$BranchLength)
cor.test(mut$C_T_rate, mut$BranchLength)
lin_model = lm(BranchLength ~ C_T_Rate, mut)
lin_model = lm(BranchLength ~ C_T_rate, mut)
View(lin_model)
summary(lin_model)
lin_model$residuals
a = as.matrix(lin_model$residuals)
View(a)
a = as.data.frame(lin_model$residuals)
b = cbind(a, mut$Species)
View(b)
write.tree(rootedTree, 'results/rootedTree.newick')
res = as.data.frame(NULL)
for(i in 15:26){
lin_model = lm(mut[, i] ~ mut$BranchLength)
res = cbind(res, lin_model$residuals)
}
View(lin_model)
res = as.data.frame(matrix(nrow = nrow(mut)))
View(res)
for(i in 15:26){
lin_model = lm(mut[, i] ~ mut$BranchLength)
res = cbind(res, lin_model$residuals)
}
View(res)
res = res[, -1]
View(res)
names(res) = sub(' ', '', paste(names(mut), '.res'))
names(res) = sub(' ', '', paste(names(mut[15:26]), '.res'))
View(res)
View(mut)
mut = cbind(mut, res)
View(mut)
plot(mut$BranchLength, mut$C_T_rate.res)
plot(mut$C_T_rate.res, mut$BranchLength)
lin_model = lm(BranchLength ~ C_T_rate, mut)
summary(lin_model)
lin_model$residuals
lin_model = lm(C_T_rate ~ BranchLength, mut)
summary(lin_model)
lin_model$residuals
View(mut)
plot(mut$C_T_rate.res, mut$BranchLength)
plot(mut$A_G_rate, mut$BranchLength)
plot(mut$A_G_rate.res, mut$BranchLength)
MATRIX = mut[, c(27:38)]
row.names(MATRIX)=mut$Species
matrix = MATRIX
PCA = prcomp(matrix, center = TRUE, scale = TRUE) #FALSE) # I don't scale because we analyze the same units (fraction from MutSpec)
print(PCA)
summary(PCA)
MATRIX$Pca1 = PCA$x[,1]
MATRIX$Pca2 = PCA$x[,2]
MATRIX$Pca3 = PCA$x[,3]
MATRIX$Pca4 = PCA$x[,4]
biplot(PCA, choices=c(1,2), col = c('white','black'), cex = 0.8) #  biplot(princomp(USArrests),choices=c(1,3))
MATRIX = mut[, c(2:13)]
row.names(MATRIX)=mut$Species
matrix = MATRIX
PCA = prcomp(matrix, center = TRUE, scale = TRUE) #FALSE) # I don't scale because we analyze the same units (fraction from MutSpec)
print(PCA)
summary(PCA)
biplot(PCA, choices=c(1,2), col = c('white','black'), cex = 0.8) #  biplot(princomp(USArrests),choices=c(1,3))
pdf('results/PCA.pdf')
biplot(PCA, choices=c(1,2), col = c('white','black'), cex = 0.8) #  biplot(princomp(USArrests),choices=c(1,3))
dev.off()
plot(mut$A_G_rate, mut$BranchLength)
plot(mut$A_G_rate.res, mut$BranchLength)
cor.test(mut$A_G_rate.res, mut$BranchLength)
cor.test(mut$A_G_rate, mut$BranchLength)
mut = read.table('results/4foldSubsRatesBrLen02.txt', header=TRUE, sep='\t')
plot(mut$C_T_rate, mut$BranchLength)
lin_model = lm(C_T_rate ~ BranchLength, mut)
summary(lin_model)
lin_model$residuals
res = as.data.frame(matrix(nrow = nrow(mut)))
for(i in 15:26){
lin_model = lm(mut[, i] ~ mut$BranchLength)
res = cbind(res, lin_model$residuals)
}
res = res[, -1]
names(res) = sub(' ', '', paste(names(mut[15:26]), '.res'))
mut = cbind(mut, res)
plot(mut$C_T_rate.res, mut$BranchLength)
plot(mut$A_G_rate, mut$BranchLength)
plot(mut$A_G_rate.res, mut$BranchLength)
cor.test(mut$A_G_rate, mut$BranchLength)
cor.test(mut$A_G_rate.res, mut$BranchLength)
View(res)
View(res)
View(mut)
summary(mut$BranchLength)
write.table(mut, 'results/4foldSubsRatesBrLen02Residuals.txt')
library(ape)
mut = read.table('results/4foldSubs.txt', header = TRUE, sep='\t')
tree = read.tree('results/phylogeny/iqtree_mito.treefile')
numberOfSpecies = length(tree$tip.label)
is.rooted(tree)
rootedTree = root(tree, 'Locusta_migratoria_1', resolve.root	= TRUE)
a = as.data.frame(rootedTree$edge)
library(stringr)
library(seqinr)
anc = read.table('results/phylogeny/iqtree_mito.state', header=TRUE)
agg = aggregate(State ~ Node, anc, paste, collapse = "")
table(anc$Node)
tree$edge
numberOfSpecies = length(tree$tip.label)
a = as.data.frame(tree$edge)
a = cbind(a, tree$edge.length)
externalBranches = a[a$V2 <= numberOfSpecies,]
externalBranches = cbind(externalBranches, tree$tip.label)
names(externalBranches) = c('Node', 'Tip', 'BranchLength', 'Species')
tree = root(tree, 'Locusta_migratoria_1')
labelsTree = as.data.frame(as.character(tree$node.label))
View(labelsTree)
names(labelsTree) = 'NodeLabels'
a = do.call(rbind, str_split(labelsTree$NodeLabels, '/'))
labelsTree = cbind(labelsTree, a)
names(labelsTree) = c('NodeLabels', 'Node', 'Bootstrap', 'Bootstrap2')
ancSeqs = merge(agg, labelsTree, by='Node')
View(agg)
ancSeqs$Node = as.numeric(sub('Node', '', ancSeqs$Node))
ancSeqs$Node = ancSeqs$Node + numberOfSpecies
data = merge(ancSeqs, externalBranches, by='Node')
aligns = read.fasta('results/align_cat.fasta', as.string = TRUE)
a = data.frame(Species=names(aligns), Seqs=unlist(getSequence(aligns, as.string=T)))
View(data)
View(anc)
table(anc$Node)
View(externalBranches)
summary(externalBranches$Node)
summary(externalBranches$Node - 536)
View(labelsTree)
View(ancSeqs)
summary(ancSeqs$Node)
tree$node.label
View(data)
data$Species = as.character(data$Species)
a$Species = as.character(a$Species)
anc_desSeqs = merge(data, a, by='Species')
View(anc_desSeqs)
View(a)
setdiff(data$Species, anc_desSeqs$Species)
View(a)
data$Species = sub('?', '', data$Species)
data$Species = sub('__', '_', data$Species)
anc_desSeqs = merge(data, a, by='Species')
setdiff(data$Species, anc_desSeqs$Species)
a$Species = sub('?', '', a$Species)
anc_desSeqs = merge(data, a, by='Species')
setdiff(data$Species, anc_desSeqs$Species)
a$Species = sub('?', '', a$Species)
View(a)
a$Species = lapply(a$Species, function(x) sub('?', '', x)
)
View(a)
a$Species = lapply(a$Species, function(x) sub('?', '', x))
anc_desSeqs = merge(data, a, by='Species')
setdiff(data$Species, anc_desSeqs$Species)
a = data.frame(Species=names(aligns), Seqs=unlist(getSequence(aligns, as.string=T)))
a$Species = as.character(a$Species)
a$Species = sapply(a$Species, function(x) sub('?', '', x))
anc_desSeqs = merge(data, a, by='Species')
setdiff(data$Species, anc_desSeqs$Species)
View(a)
# a$Species = sapply(a$Species, function(x) sub('?', '', x))
a$Species = str_replace_all(a$Species, '?', '')
# a$Species = sapply(a$Species, function(x) sub('?', '', x))
a$Species = str_replace_all(a$Species, '\?', '')
# a$Species = sapply(a$Species, function(x) sub('?', '', x))
a$Species = str_replace_all(a$Species, '?', '')
?str_replace_all
# a$Species = sapply(a$Species, function(x) sub('?', '', x))
a$Species = str_replace_all(a$Species, fixed('?'), '')
View(a)
anc_desSeqs = merge(data, a, by='Species')
setdiff(data$Species, anc_desSeqs$Species)
a$Species = str_replace_all(a$Species, fixed(';'), '')
anc_desSeqs = merge(data, a, by='Species')
setdiff(data$Species, anc_desSeqs$Species)
data$Species = str_replace_all(data$Species, fixed('__'), '_')
anc_desSeqs = merge(data, a, by='Species')
setdiff(data$Species, anc_desSeqs$Species)
a$Species = str_replace_all(a$Species, fixed('__'), '')
anc_desSeqs = merge(data, a, by='Species')
setdiff(data$Species, anc_desSeqs$Species)
a = data.frame(Species=names(aligns), Seqs=unlist(getSequence(aligns, as.string=T)))
a$Species = as.character(a$Species)
# a$Species = sapply(a$Species, function(x) sub('?', '', x))
a$Species = str_replace_all(a$Species, fixed('?'), '')
a$Species = str_replace_all(a$Species, fixed(';'), '')
a$Species = str_replace_all(a$Species, fixed('__'), '_')
anc_desSeqs = merge(data, a, by='Species')
setdiff(data$Species, anc_desSeqs$Species)
View(anc_desSeqs)
which(is.na(anc_desSeqs$State))
which(is.na(anc_desSeqs$Seqs))
codonTable = as.data.frame(NULL)
for (y in 1:nrow(anc_desSeqs)){
# y = 1
mdns <- as.character(anc_desSeqs$State[y])
msns <- toupper(as.character(anc_desSeqs$Seqs[y]))
s1 <- s2c(mdns)       #conversion of a string into a vector of chars
s2 <-  s2c(msns)
cdns1 <- splitseq(s1, 0, 3) #split a sequence into sub-sequences (codons)
cdns2 <- splitseq(s2, 0, 3)
codonposition <-c(1:length(cdns1))
final <- c()
#allframes <- c()
for (x in codonposition){
# x = 1
if (cdns1[x] != cdns2[x]){
taa1 <- translate(s2c(cdns1[x]), frame = 0, sens = "F", numcode = 5, NAstring = "X", ambiguous = FALSE)
taa2 <- translate(s2c(cdns2[x]), frame = 0, sens = "F", numcode = 5, NAstring = "X", ambiguous = FALSE)
species <- anc_desSeqs$Species[y]
print(c(species, x))
if (x > 1 & x < length(codonposition))
{
final <- rbind(final, c(species, x, cdns1[x-1], cdns1[x], cdns1[x+1], cdns2[x-1], cdns2[x], cdns2[x+1], taa1, taa2))
}
if (x == 1)
{
final <- rbind(final, c(species, x, '---', cdns1[x], cdns1[x+1], '---', cdns2[x], cdns2[x+1], taa1, taa2))
}
if (x == length(codonposition))
{
final <- rbind(final, c(species, x, cdns1[x-1], cdns1[x], '---', cdns2[x-1], cdns2[x], '---', taa1, taa2))
}
}
}
da <- data.frame(final)
colnames(da) <- c("Species", "CodonPosition", "PreviousAncCodon", "AncestorCodon", "NextAncCodon", "PreviousDesCodon", "DescendantCodon", "NextDesCodon", "AncestralAA", "DescendantAA")
codonTable = rbind(codonTable, da)
}
table(codonTable$Species)
View(codonTable)
length(unique(codonTable$Species))
View(anc_desSeqs)
setdiff(anc_desSeqs$Species, codonTable$Species)
setdiff(anc_desSeqs$Species, as.character(codonTable$Species))
setdiff(data$Species, as.character(codonTable$Species))
setdiff(as.character(codonTable$Species), anc_desSeqs$Species)
write.table(codonTable, 'results/PolarizeMutations.CodonsTable.txt', sep = '\t', quote = FALSE, row.names = FALSE)
View(codonTable)
library(ggplot2)
codonTable = read.table('results/PolarizeMutations.CodonsTable.txt', sep='\t', header=TRUE)
withoutGapsCodonTable = codonTable[as.character(codonTable$DescendantCodon) != '---',]
FirstCodon = withoutGapsCodonTable$AncestorCodon
SecondCodon = withoutGapsCodonTable$DescendantCodon
data = data.frame(FirstCodon,SecondCodon)
data$FirstSecond = paste(data$FirstCodon,data$SecondCodon,sep = '_')
COMPAR<-function(x)	{
cod1 <- unlist(strsplit(x,'_'))[1]
cod2 <- unlist(strsplit(x,'_'))[2]
#table <- c("FirstCOD", "SecondCOD")
NumSub <- 0
unlist(strsplit(cod1,''))[1]
if (unlist(strsplit(cod1,''))[1] != unlist(strsplit(cod2,''))[1]){
NumSub = 1 + NumSub
FirstC <- unlist(strsplit(cod1,''))[1]
SecC <- unlist(strsplit(cod2,''))[1]
}
if (unlist(strsplit(cod1,''))[2] != unlist(strsplit(cod2,''))[2]){
NumSub = 1 + NumSub
FirstC <- unlist(strsplit(cod1,''))[2]
SecC <- unlist(strsplit(cod2,''))[2]
}
if (unlist(strsplit(cod1,''))[3] != unlist(strsplit(cod2,''))[3])
{
NumSub = 1 + NumSub
FirstC <- unlist(strsplit(cod1,''))[3]
SecC <- unlist(strsplit(cod2,''))[3]
}
if (NumSub == 1) {nucleotides <- paste(FirstC,SecC,sep='_')}
if (NumSub > 1)  {nucleotides  = 'MoreThanOne_SUBST'}
return(nucleotides);
}
data$Subst = apply(as.matrix(data$FirstSecond),1,COMPAR)
withoutGapsCodonTable$Subs = data$Subst
tableSubs = withoutGapsCodonTable[withoutGapsCodonTable$Subs != 'MoreThanOne_SUBST',]
tableSubs$Subs = as.character(tableSubs$Subs)
mut = tableSubs[which(!(tableSubs$Subs %in% c('A_N', 'A_R', 'C_N', 'G_N', 'T_K', 'T_N', 'T_Y',
'-_A', '-_C', 'C_Y', '-_G', 'G_R', '-_T'))),]
ggplot(mut, aes(x = Subs)) +
geom_histogram(stat = 'count')
syn = mut[as.character(mut$AncestralAA) == as.character(mut$DescendantAA),]
write.table(mut, 'results/AllSubs.txt', sep='\t', row.names = FALSE, quote = FALSE)
write.table(syn, 'results/SynSubs.txt', sep='\t', row.names = FALSE, quote = FALSE)
VecOfSynFourFoldDegenerateSites <- c('CTT', 'CTC', 'CTA', 'CTG',
'GTT', 'GTC', 'GTA', 'GTG',
'TCT', 'TCC', 'TCA', 'TCG',
'CCT', 'CCC', 'CCA', 'CCG',
'ACT', 'ACC', 'ACA', 'ACG',
'GCT', 'GCC', 'GCA', 'GCG',
'CGT', 'CGC', 'CGA', 'CGG',
'GGT', 'GGC', 'GGA', 'GGG',
'AGT', 'AGC', 'AGA', 'AGG')
length(unique(VecOfSynFourFoldDegenerateSites)) # 36
mut4f = mut[mut$AncestorCodon %in% VecOfSynFourFoldDegenerateSites & mut$DescendantCodon %in% VecOfSynFourFoldDegenerateSites,]; nrow(mut4f) # 209120
write.table(mut4f, 'results/4foldSubs.txt', sep='\t', row.names = FALSE, quote = FALSE)
table(mut4f$Species)
library(ape)
mut = read.table('results/4foldSubs.txt', header = TRUE, sep='\t')
tree = read.tree('results/phylogeny/iqtree_mito.treefile')
numberOfSpecies = length(tree$tip.label)
is.rooted(tree)
rootedTree = root(tree, 'Locusta_migratoria_1', resolve.root	= TRUE)
a = as.data.frame(rootedTree$edge)
a = cbind(a, rootedTree$edge.length)
externalBranches = a[a$V2 <= numberOfSpecies,]
externalBranches = cbind(externalBranches, tree$tip.label)
names(externalBranches) = c('Node', 'Tip', 'BranchLength', 'Species')
mut$Subs = as.character(mut$Subs)
speciesNumber = length(unique(mut$Species))
length(unique(mut$Species))
View(data)
length(unique(tableSubs$Species))
mut = tableSubs[which(!(tableSubs$Subs %in% c('A_N', 'A_R', 'C_N', 'G_N', 'T_K', 'T_N', 'T_Y',
'-_A', '-_C', 'C_Y', '-_G', 'G_R', '-_T'))),]
codonTable = read.table('results/PolarizeMutations.CodonsTable.txt', sep='\t', header=TRUE)
length(unique(codonTable$Species))
withoutGapsCodonTable = codonTable[as.character(codonTable$DescendantCodon) != '---',]
length(unique(withoutGapsCodonTable$Species))
length(unique(codonTable$Species))
length(unique(withoutGapsCodonTable$Species)) #
setdiff(codonTable$Species, withoutGapsCodonTable$Species)
View(codonTable)
FirstCodon = withoutGapsCodonTable$AncestorCodon
SecondCodon = withoutGapsCodonTable$DescendantCodon
data = data.frame(FirstCodon,SecondCodon)
data$FirstSecond = paste(data$FirstCodon,data$SecondCodon,sep = '_')
COMPAR<-function(x)	{
cod1 <- unlist(strsplit(x,'_'))[1]
cod2 <- unlist(strsplit(x,'_'))[2]
#table <- c("FirstCOD", "SecondCOD")
NumSub <- 0
unlist(strsplit(cod1,''))[1]
if (unlist(strsplit(cod1,''))[1] != unlist(strsplit(cod2,''))[1]){
NumSub = 1 + NumSub
FirstC <- unlist(strsplit(cod1,''))[1]
SecC <- unlist(strsplit(cod2,''))[1]
}
if (unlist(strsplit(cod1,''))[2] != unlist(strsplit(cod2,''))[2]){
NumSub = 1 + NumSub
FirstC <- unlist(strsplit(cod1,''))[2]
SecC <- unlist(strsplit(cod2,''))[2]
}
if (unlist(strsplit(cod1,''))[3] != unlist(strsplit(cod2,''))[3])
{
NumSub = 1 + NumSub
FirstC <- unlist(strsplit(cod1,''))[3]
SecC <- unlist(strsplit(cod2,''))[3]
}
if (NumSub == 1) {nucleotides <- paste(FirstC,SecC,sep='_')}
if (NumSub > 1)  {nucleotides  = 'MoreThanOne_SUBST'}
return(nucleotides);
}
data$Subst = apply(as.matrix(data$FirstSecond),1,COMPAR)
withoutGapsCodonTable$Subs = data$Subst
tableSubs = withoutGapsCodonTable[withoutGapsCodonTable$Subs != 'MoreThanOne_SUBST',]
length(unique(tableSubs$Species))
tableSubs$Subs = as.character(tableSubs$Subs)
mut = tableSubs[which(!(tableSubs$Subs %in% c('A_N', 'A_R', 'C_N', 'G_N', 'T_K', 'T_N', 'T_Y',
'-_A', '-_C', 'C_Y', '-_G', 'G_R', '-_T'))),]
length(unique(mut$Species))
ggplot(mut, aes(x = Subs)) +
geom_histogram(stat = 'count')
table(mut$Subs)
syn = mut[as.character(mut$AncestralAA) == as.character(mut$DescendantAA),]
ggplot(syn, aes(x = Subs)) +
geom_histogram(stat = 'count')
write.table(mut, 'results/AllSubs.txt', sep='\t', row.names = FALSE, quote = FALSE)
write.table(syn, 'results/SynSubs.txt', sep='\t', row.names = FALSE, quote = FALSE)
VecOfSynFourFoldDegenerateSites <- c('CTT', 'CTC', 'CTA', 'CTG',
'GTT', 'GTC', 'GTA', 'GTG',
'TCT', 'TCC', 'TCA', 'TCG',
'CCT', 'CCC', 'CCA', 'CCG',
'ACT', 'ACC', 'ACA', 'ACG',
'GCT', 'GCC', 'GCA', 'GCG',
'CGT', 'CGC', 'CGA', 'CGG',
'GGT', 'GGC', 'GGA', 'GGG',
'AGT', 'AGC', 'AGA', 'AGG')
length(unique(VecOfSynFourFoldDegenerateSites)) # 36
mut4f = mut[mut$AncestorCodon %in% VecOfSynFourFoldDegenerateSites & mut$DescendantCodon %in% VecOfSynFourFoldDegenerateSites,]; nrow(mut4f) # 209120
length(unique(mut4f$Species))
write.table(mut4f, 'results/4foldSubs.txt', sep='\t', row.names = FALSE, quote = FALSE)
table(mut4f$Species)
library(ape)
mut = read.table('results/4foldSubs.txt', header = TRUE, sep='\t')
tree = read.tree('results/phylogeny/iqtree_mito.treefile')
numberOfSpecies = length(tree$tip.label)
is.rooted(tree)
rootedTree = root(tree, 'Locusta_migratoria_1', resolve.root	= TRUE)
write.tree(rootedTree, 'results/rootedTree.newick')
a = as.data.frame(rootedTree$edge)
a = cbind(a, rootedTree$edge.length)
externalBranches = a[a$V2 <= numberOfSpecies,]
externalBranches = cbind(externalBranches, tree$tip.label)
names(externalBranches) = c('Node', 'Tip', 'BranchLength', 'Species')
brLenLess05 = externalBranches[externalBranches$BranchLength < 0.05,]
brLenMore05 = externalBranches[externalBranches$BranchLength > 0.05,]
brLenLess02 = externalBranches[externalBranches$BranchLength < 0.02,]
brLenMore02 = externalBranches[externalBranches$BranchLength > 0.02,]
treeMore05 = drop.tip(rootedTree, as.character(brLenLess05$Species))
length(treeMore05$tip.label)
treeMore02 = drop.tip(rootedTree, as.character(brLenLess02$Species))
length(treeMore02$tip.label)
mut$Subs = as.character(mut$Subs)
speciesNumber = length(unique(mut$Species))
mutTable = setNames(data.frame(matrix(0, ncol = 12, nrow = speciesNumber)), unique(mut$Subs))
Species = unique(mut$Species)
mutTable = cbind(Species, mutTable)
for(i in 1:nrow(mut)){
row = mut[i, ]
mutTable[mutTable$Species == row$Species, row$Subs] = mutTable[mutTable$Species == row$Species, row$Subs] + 1
}
table(mut[mut$Species == "AUS49_Tumulitermes_sp._1",]$Subs)
View(mutTable)
data = merge(mutTable, externalBranches[, c('Species', 'BranchLength')], by='Species')
setdiff(mutTable$Species, externalBranches$Species)
View(externalBranches)
externalBranches$Species = str_replace_all(externalBranches$Species, fixed('?'), '')
data = merge(mutTable, externalBranches[, c('Species', 'BranchLength')], by='Species')
# externalBranches$Species = str_replace_all(externalBranches$Species, fixed('?'), '')
externalBranches$Species = str_replace_all(externalBranches$Species, fixed(';'), '')
data = merge(mutTable, externalBranches[, c('Species', 'BranchLength')], by='Species')
# externalBranches$Species = str_replace_all(externalBranches$Species, fixed('?'), '')
# externalBranches$Species = str_replace_all(externalBranches$Species, fixed(';'), '')
externalBranches$Species = str_replace_all(externalBranches$Species, fixed('__'), '_')
data = merge(mutTable, externalBranches[, c('Species', 'BranchLength')], by='Species')
setdiff(mutTable$Species, externalBranches$Species)
dataMore05 = data[data$BranchLength > 0.05, ]
dataMore02 = data[data$BranchLength > 0.02, ]
a = matrix(0, ncol=12, nrow=length(unique(dataMore02$Species)))
for(i in 1:12){
a[, i] = dataMore02[, i+1] / dataMore02$BranchLength
}
rates = as.data.frame(a)
names(rates) = sub(' ', '', paste(names(mutTable[, -1]), '_rate'))
subsRates = cbind(dataMore02, rates)
View(subsRates)
write.table(subsRates, 'results/4foldSubsRatesBrLen02.txt', sep='\t', row.names = FALSE, quote = FALSE)
mut = read.table('results/4foldSubsRatesBrLen02.txt', header=TRUE, sep='\t')
plot(mut$C_T_rate, mut$BranchLength)
lin_model = lm(C_T_rate ~ BranchLength, mut)
summary(lin_model)
lin_model$residuals
res = as.data.frame(matrix(nrow = nrow(mut)))
for(i in 15:26){
lin_model = lm(mut[, i] ~ mut$BranchLength)
res = cbind(res, lin_model$residuals)
}
res = res[, -1]
names(res) = sub(' ', '', paste(names(mut[15:26]), '.res'))
mut = cbind(mut, res)
plot(mut$C_T_rate.res, mut$BranchLength)
plot(mut$A_G_rate, mut$BranchLength)
plot(mut$A_G_rate.res, mut$BranchLength)
cor.test(mut$A_G_rate, mut$BranchLength)
cor.test(mut$A_G_rate.res, mut$BranchLength)
write.table(mut, 'results/4foldSubsRatesBrLen02Residuals.txt')
write.table(mut, 'results/4foldSubsRatesBrLen02Residuals.txt', row.names = FALSE, quote = FALSE)
