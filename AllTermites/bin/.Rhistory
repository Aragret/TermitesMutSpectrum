geom_point() +
geom_abline()
ggplot(mut, aes(Ts, Tv, col = Cockroaches)) +
geom_point(aes(size = HigherTermites)) +
geom_abline()
ggplot(mut[mut$HigherTermites == 1,], aes(Ts, Tv, col = Taxonomy)) +
geom_point(aes(size = 1.5)) + # scale_colour_manual(values=pal_simpsons(palette = c("springfield"), alpha = 1))
scale_color_simpsons(palette = c("springfield")) +
geom_abline()
unique(mut[mut$Cockroaches == 0, 'Taxonomy'])
manualcolors<-c('#543005','#8c510a','#bf812d','#dfc27d','#f6e8c3','#f5f5f5','#c7eae5','#80cdc1','#35978f','#01665e','#003c30',
'#a50026','#d73027','#f46d43','#fdae61','#fee090','#ffffbf','#e0f3f8','#abd9e9','#74add1','#4575b4','#313695',
'#8e0152','#c51b7d','#de77ae','#f1b6da','#fde0ef','#f7f7f7','#e6f5d0','#b8e186','#7fbc41','#4d9221','#276419')
ggplot(mut[mut$Cockroaches == 0,], aes(Ts, Tv, col = Taxonomy)) +
geom_point(aes(size = 1.5)) +
scale_color_manual(values = manualcolors) +
geom_abline()
ggplot(mut[mut$Cockroaches == 0,], aes(Ts, Tv, col = Taxonomy)) +
geom_point(aes(size = HigherTermites)) +
scale_color_manual(values = manualcolors) +
geom_abline()
ggplot(mut[mut$Cockroaches == 0,], aes(Ts, Tv)) +
geom_point() +
geom_abline() +
facet_wrap(~ Taxonomy)
ggplot(mut[mut$Cockroaches == 1,], aes(Ts, Tv)) +
geom_point() +
geom_abline() +
facet_wrap(~ Taxonomy)
ggplot(mut[mut$Cockroaches == 1,], aes(Ts, Tv, col = Cryptocercus)) +
geom_point(aes(size = 1.5)) +
geom_abline()
dev.off()
ggplot(mut[mut$Cockroaches == 1,], aes(Ts, Tv, col = Cryptocercus)) +
geom_point(aes(size = 1.5)) +
geom_abline() + ggtitle('Cockroaches')
pdf('../results/cockroaches11_19/TsTvNormalization.R.pdf', width = 11)
plot(mut$sumOfSubs, mut$TsTv)
plot(mut$sumOfSubs, mut$Ts)
plot(mut$sumOfSubs, mut$Tv)
plot(mut$Ts, mut$Tv)
mut$Cockroaches = as.factor(mut$Cockroaches)
ggplot(mut, aes(Ts, Tv, col = Cockroaches)) +
geom_point() +
geom_abline()
ggplot(mut, aes(Ts, Tv, col = Cockroaches)) +
geom_point(aes(size = HigherTermites)) +
geom_abline()
ggplot(mut[mut$HigherTermites == 1,], aes(Ts, Tv, col = Taxonomy)) +
geom_point(aes(size = 1.5)) + # scale_colour_manual(values=pal_simpsons(palette = c("springfield"), alpha = 1))
scale_color_simpsons(palette = c("springfield")) +
geom_abline()
unique(mut[mut$Cockroaches == 0, 'Taxonomy'])
manualcolors<-c('#543005','#8c510a','#bf812d','#dfc27d','#f6e8c3','#f5f5f5','#c7eae5','#80cdc1','#35978f','#01665e','#003c30',
'#a50026','#d73027','#f46d43','#fdae61','#fee090','#ffffbf','#e0f3f8','#abd9e9','#74add1','#4575b4','#313695',
'#8e0152','#c51b7d','#de77ae','#f1b6da','#fde0ef','#f7f7f7','#e6f5d0','#b8e186','#7fbc41','#4d9221','#276419')
ggplot(mut[mut$Cockroaches == 0,], aes(Ts, Tv, col = Taxonomy)) +
geom_point(aes(size = 1.5)) +
scale_color_manual(values = manualcolors) +
geom_abline()
ggplot(mut[mut$Cockroaches == 0,], aes(Ts, Tv, col = Taxonomy)) +
geom_point(aes(size = HigherTermites)) +
scale_color_manual(values = manualcolors) +
geom_abline()
ggplot(mut[mut$Cockroaches == 0,], aes(Ts, Tv)) +
geom_point() +
geom_abline() +
facet_wrap(~ Taxonomy)
ggplot(mut[mut$Cockroaches == 1,], aes(Ts, Tv)) +
geom_point() +
geom_abline() +
facet_wrap(~ Taxonomy)
ggplot(mut[mut$Cockroaches == 1,], aes(Ts, Tv, col = Cryptocercus)) +
geom_point(aes(size = 1.5)) +
geom_abline() + ggtitle('Cockroaches')
dev.off()
library(ape)
tree = read.tree('../results/rootedTreeCockroaches.newick')
numberOfSpecies = length(tree$tip.label)
a = as.data.frame(tree$edge)
a = cbind(a, tree$edge.length)
externalBranches = a[a$V2 <= numberOfSpecies,]
externalBranches = cbind(externalBranches, tree$tip.label)
names(externalBranches) = c('Node', 'Tip', 'BranchLength', 'Species')
View(externalBranches)
View(externalBranches)
tempTree = drop.tip(tree, 'ISO845_Zootermopsis_angusticollis_1')
a = as.data.frame(tree$edge)
a = cbind(a, tree$edge.length)
tempExtBranches = a[a$V2 <= numberOfSpecies,]
tempExtBranches = cbind(tempExtBranches, tempTree$tip.label)
tempExtBranches = a[a$V2 <= numberOfSpecies - 1,]
tempExtBranches = cbind(tempExtBranches, tempTree$tip.label)
View(tempExtBranches)
View(a)
anc = read.table('../results/cockroaches11_19/phylogeny/iqtree_mito.state', header=TRUE)
agg = aggregate(State ~ Node, anc, paste, collapse = "")
table(anc$Node)
tree = read.tree('../results/rootedTreeCockroaches.newick')
View(a)
a = as.data.frame(tree$edge)
a = cbind(a, tree$edge.length)
externalBranches = a[a$V2 <= numberOfSpecies,]
externalBranches = cbind(externalBranches, tree$tip.label)
names(externalBranches) = c('Node', 'Tip', 'BranchLength', 'Species')
View(externalBranches)
View(externalBranches)
library(geiger)
max_node_number = max(tree$edge)
min_node_number = length(tree$tip.label) + 1
one_line = c()
for (i in min_node_number:max_node_number){
descendants = tips(tree, i)
if (length(descendants) == 2){
one_line = rbind(one_line, c(i, descendants))
}
}
sisters = as.data.frame(one_line)
names(sisters) = c('NodeNumber', 'Species1', 'Species2')
View(sisters)
View(externalBranches)
sistersBranchL = merge(sisters, externalBranches, by.x = 'Species1', by.y = 'Species')
View(sistersBranchL)
sistersBranchL = merge(sistersBranchL, externalBranches[, c('Species', 'BranchLength')],
by.x = 'Species2', by.y = 'Species')
View(sistersBranchL)
toRemove = c()
toRemove = c()
for(i in 1:nrow(sistersBranchL)){
if(sistersBranchL[i,]$BranchLength.x >= 0.02 & sistersBranchL[i,]$BranchLength.y >= 0.02){
toRemove = c(toRemove, i)
}
}
smallBranches = sistersBranchL[-toRemove,]
View(smallBranches)
tipsToRemove = c()
nodesNeeded = c()
View(externalBranches)
i = 1
smallBranches[i,]$BranchLength.x >= 0.02
i = 186
smallBranches[i,]$BranchLength.x >= 0.02
smallBranches[i,]$BranchLength.x
smallBranches[i,]$Species2
as.character(smallBranches[i,]$Species2)
i = 1
as.character(smallBranches[i,]$Species2)
View(a)
View(externalBranches)
View(a)
lastAncNode = smallBranches[i,]$Node
previousAnc = a[a$V2 == lastAncNode,]$V1
names(a) = c('Node', 'Tip', 'BranchLength')
previousAnc = a[a$Tip == lastAncNode,]$Node
a[a$Tip == previousAnc,]$BranchLength <= 0.02
brLenPrevAnc = a[a$Tip == previousAnc,]$BranchLength
brLenPrevAnc <= 0.02
a[a$Tip == previousAnc,]$Node
while(brLenPrevAnc <= 0.02){
previousAnc = a[a$Tip == previousAnc,]$Node
brLenPrevAnc = a[a$Tip == previousAnc,]$BranchLength
}
for(i in 1:nrow(smallBranches)){
# i = 1
if(smallBranches[i,]$BranchLength.x >= 0.02){
tipsToRemove = c(tipsToRemove, as.character(smallBranches[i,]$Species2))
next
}
if(smallBranches[i,]$BranchLength.y >= 0.02){
tipsToRemove = c(tipsToRemove, as.character(smallBranches[i,]$Species1))
next
}
tipsToRemove = c(tipsToRemove, smallBranches[i,]$Species2)
lastAncNode = smallBranches[i,]$Node
previousAnc = a[a$Tip == lastAncNode,]$Node
brLenPrevAnc = a[a$Tip == previousAnc,]$BranchLength
while(brLenPrevAnc <= 0.02){
previousAnc = a[a$Tip == previousAnc,]$Node
brLenPrevAnc = a[a$Tip == previousAnc,]$BranchLength
}
nodesNeeded = rbind(nodesNeeded, c(smallBranches[i,]$Species1, previousAnc, brLenPrevAnc))
}
View(nodesNeeded)
View(smallBranches)
tipsToRemove = c()
nodesNeeded = c()
for(i in 1:nrow(smallBranches)){
# i = 1
if(smallBranches[i,]$BranchLength.x >= 0.02){
tipsToRemove = c(tipsToRemove, as.character(smallBranches[i,]$Species2))
next
}
if(smallBranches[i,]$BranchLength.y >= 0.02){
tipsToRemove = c(tipsToRemove, as.character(smallBranches[i,]$Species1))
next
}
tipsToRemove = c(tipsToRemove, as.character(smallBranches[i,]$Species2))
lastAncNode = smallBranches[i,]$Node
previousAnc = a[a$Tip == lastAncNode,]$Node
brLenPrevAnc = a[a$Tip == previousAnc,]$BranchLength
while(brLenPrevAnc <= 0.02){
previousAnc = a[a$Tip == previousAnc,]$Node
brLenPrevAnc = a[a$Tip == previousAnc,]$BranchLength
}
nodesNeeded = rbind(nodesNeeded, c(as.character(smallBranches[i,]$Species1),
previousAnc, brLenPrevAnc))
}
View(nodesNeeded)
View(externalBranches)
View(smallBranches)
View(nodesNeeded)
as.character(smallBranches[i,]$Species1)
tipsToRemove = c()
tipsToRemove = c(tipsToRemove, as.character(smallBranches[i,]$Species2))
tipsToRemove = c(tipsToRemove, as.character(smallBranches[i,]$Species1))
next
tipsToRemove = c()
nodesNeeded = c()
for(i in 1:nrow(smallBranches)){
# i = 1
if(smallBranches[i,]$BranchLength.x >= 0.02){
tipsToRemove = c(tipsToRemove, as.character(smallBranches[i,]$Species2))
next
}
if(smallBranches[i,]$BranchLength.y >= 0.02){
tipsToRemove = c(tipsToRemove, as.character(smallBranches[i,]$Species1))
next
}
tipsToRemove = c(tipsToRemove, as.character(smallBranches[i,]$Species2))
lastAncNode = smallBranches[i,]$Node
previousAnc = a[a$Tip == lastAncNode,]$Node
brLenPrevAnc = a[a$Tip == previousAnc,]$BranchLength
while(brLenPrevAnc <= 0.02){
previousAnc = a[a$Tip == previousAnc,]$Node
brLenPrevAnc = a[a$Tip == previousAnc,]$BranchLength
}
nodesNeeded = rbind(nodesNeeded, c(as.character(smallBranches[i,]$Species1),
previousAnc, brLenPrevAnc))
}
View(nodesNeeded)
prunedTree = drop.tip(tree, tipsToRemove)
nodesNeeded = as.data.frame(nodesNeeded)
View(nodesNeeded)
names(nodesNeeded) = c('Species', 'Node', 'BranchLength')
View(externalBranches)
externalBranches$Species = as.character(externalBranches$Species)
nodesNeeded$Species = as.character(nodesNeeded$Species)
modExternalBranches = externalBranches[!(externalBranches$Species %in% c(tipsToRemove, nodesNeeded$Species))]
modExternalBranches = externalBranches[!(externalBranches$Species %in% c(tipsToRemove, nodesNeeded$Species)),]
View(modExternalBranches)
View(nodesNeeded)
modExternalBranches = modExternalBranches[, -2]
View(modExternalBranches)
modExternalBranches = rbind(modExternalBranches, nodesNeeded)
View(modExternalBranches)
summary(modExternalBranches$BranchLength)
modExternalBranches$Node = as.integer(modExternalBranches$Node)
modExternalBranches$BranchLength = as.numeric(modExternalBranches$BranchLength)
summary(modExternalBranches$BranchLength)
View(agg)
agg$Node = as.numeric(sub('Node', '', agg$Node))
############################################################################
length(unique(modExternalBranches$Species))
############################################################################
numberOfSpecies = length(unique(modExternalBranches$Species))
############################################################################
numberOfSpecies = length(tree$tip.label)
agg$Node = agg$Node + numberOfSpecies
View(agg)
data = merge(agg, externalBranches, by='Node')
View(data)
View(nodesNeeded)
View(modExternalBranches)
View(agg)
data = merge(agg, modExternalBranches, by='Node')
View(data)
View(externalBranches)
tipsToRemove = c()
nodesNeeded = c()
for(i in 1:nrow(smallBranches)){
# i = 1
if(smallBranches[i,]$BranchLength.x >= 0.02){
tipsToRemove = c(tipsToRemove, as.character(smallBranches[i,]$Species2))
next
}
if(smallBranches[i,]$BranchLength.y >= 0.02){
tipsToRemove = c(tipsToRemove, as.character(smallBranches[i,]$Species1))
next
}
tipsToRemove = c(tipsToRemove, as.character(smallBranches[i,]$Species2))
lastAncNode = smallBranches[i,]$Node
previousAnc = a[a$Tip == lastAncNode,]$Node
brLenPrevAnc = a[a$Tip == previousAnc,]$BranchLength
while(brLenPrevAnc <= 0.02){
previousAnc = a[a$Tip == previousAnc,]$Node
brLenPrevAnc = brLenPrevAnc + a[a$Tip == previousAnc,]$BranchLength
}
nodesNeeded = rbind(nodesNeeded, c(as.character(smallBranches[i,]$Species1),
previousAnc, brLenPrevAnc))
}
nodesNeeded = as.data.frame(nodesNeeded)
names(nodesNeeded) = c('Species', 'Node', 'BranchLength')
prunedTree = drop.tip(tree, tipsToRemove)
externalBranches$Species = as.character(externalBranches$Species)
nodesNeeded$Species = as.character(nodesNeeded$Species)
modExternalBranches = externalBranches[!(externalBranches$Species %in% c(tipsToRemove, nodesNeeded$Species)),]
modExternalBranches = modExternalBranches[, -2]
modExternalBranches = rbind(modExternalBranches, nodesNeeded)
modExternalBranches$Node = as.integer(modExternalBranches$Node)
modExternalBranches$BranchLength = as.numeric(modExternalBranches$BranchLength)
summary(modExternalBranches$BranchLength)
############################################################################
numberOfSpecies = length(tree$tip.label)
agg$Node = as.numeric(sub('Node', '', agg$Node))
agg$Node = agg$Node + numberOfSpecies
data = merge(agg, modExternalBranches, by='Node')
View(modExternalBranches)
View(externalBranches)
agg = aggregate(State ~ Node, anc, paste, collapse = "")
View(agg)
agg$Node = as.numeric(sub('Node', '', agg$Node))
agg$Node = agg$Node + numberOfSpecies
data = merge(agg, modExternalBranches, by='Node')
View(data)
aligns = read.fasta('../results/cockroaches11_19/align_cat.fasta', as.string = TRUE)
library(seqinr)
aligns = read.fasta('../results/cockroaches11_19/align_cat.fasta', as.string = TRUE)
aligns = read.fasta('../results/cockroaches11_19/aligns/align_cat.fasta', as.string = TRUE)
a = data.frame(Species=names(aligns), Seqs=unlist(getSequence(aligns, as.string=T)))
data$Species = as.character(data$Species)
a$Species = as.character(a$Species)
# a$Species = sapply(a$Species, function(x) sub('?', '', x))
a$Species = str_replace_all(a$Species, fixed('?'), '')
anc_desSeqs = merge(data, a, by='Species')
library(stringr)
setdiff(data$Species, anc_desSeqs$Species)
a$Species = str_replace_all(a$Species, fixed('__'), '_')
anc_desSeqs = merge(data, a, by='Species')
a$Species = str_replace_all(a$Species, fixed('?'), '')
a$Species = str_replace_all(a$Species, fixed(';'), '')
a$Species = str_replace_all(a$Species, fixed('__'), '_')
data$Species = str_replace_all(data$Species, fixed('__'), '_')
anc_desSeqs = merge(data, a, by='Species')
setdiff(data$Species, anc_desSeqs$Species)
data$Species = str_replace_all(data$Species, fixed('__'), '_')
anc_desSeqs = merge(data, a, by='Species')
setdiff(data$Species, anc_desSeqs$Species)
codonTable = as.data.frame(NULL)
for (y in 1:nrow(anc_desSeqs)){
# y = 1
mdns <- as.character(anc_desSeqs$State[y])
msns <- toupper(as.character(anc_desSeqs$Seqs[y]))
brLength = anc_desSeqs$BranchLength[y]
s1 <- s2c(mdns)       #conversion of a string into a vector of chars
s2 <-  s2c(msns)
cdns1 <- splitseq(s1, 0, 3) #split a sequence into sub-sequences (codons)
cdns2 <- splitseq(s2, 0, 3)
codonposition <-c(1:length(cdns1))
final <- c()
#allframes <- c()
for (x in codonposition){
# x = 1
if (cdns1[x] != cdns2[x]){
taa1 <- translate(s2c(cdns1[x]), frame = 0, sens = "F", numcode = 5, NAstring = "X", ambiguous = FALSE)
taa2 <- translate(s2c(cdns2[x]), frame = 0, sens = "F", numcode = 5, NAstring = "X", ambiguous = FALSE)
species <- anc_desSeqs$Species[y]
# print(c(species, x))
if (x > 1 & x < length(codonposition))
{
final <- rbind(final, c(species, x, cdns1[x-1], cdns1[x], cdns1[x+1], cdns2[x-1], cdns2[x], cdns2[x+1], taa1, taa2, brLength))
}
if (x == 1)
{
final <- rbind(final, c(species, x, '---', cdns1[x], cdns1[x+1], '---', cdns2[x], cdns2[x+1], taa1, taa2, brLength))
}
if (x == length(codonposition))
{
final <- rbind(final, c(species, x, cdns1[x-1], cdns1[x], '---', cdns2[x-1], cdns2[x], '---', taa1, taa2, brLength))
}
}
}
da <- data.frame(final)
colnames(da) <- c("Species", "CodonPosition", "PreviousAncCodon", "AncestorCodon", "NextAncCodon", "PreviousDesCodon", "DescendantCodon", "NextDesCodon", "AncestralAA", "DescendantAA", "BranchLength")
codonTable = rbind(codonTable, da)
}
table(codonTable$Species)
setdiff(anc_desSeqs$Species, as.character(codonTable$Species)) # nothing !
summary(data$BranchLength)
nrow(data[data$BranchLength < 0.02,])
lessThan02 = data[data$BranchLength < 0.02,]
View(lessThan02)
View(data)
write.table(codonTable, '../results/cockroaches11_19/mod_PolarizeMutations.CodonsTable.Cockroaches.txt', sep = '\t', quote = FALSE, row.names = FALSE)
rm(list=ls(all=TRUE))
library(ggplot2)
library(ggpubr)
codonTable = read.table('../results/cockroaches11_19/mod_PolarizeMutations.CodonsTable.Cockroaches.txt', sep='\t', header=TRUE)
View(codonTable)
withoutGapsCodonTable = codonTable[as.character(codonTable$DescendantCodon) != '---',]
length(unique(codonTable$Species)) #677
length(unique(withoutGapsCodonTable$Species)) #626
setdiff(codonTable$Species, withoutGapsCodonTable$Species)
FirstCodon = withoutGapsCodonTable$AncestorCodon
SecondCodon = withoutGapsCodonTable$DescendantCodon
data = data.frame(FirstCodon, SecondCodon)
data$FirstSecond = paste(data$FirstCodon, data$SecondCodon,sep = '_')
COMPAR<-function(x)	{
cod1 <- unlist(strsplit(x,'_'))[1]
cod2 <- unlist(strsplit(x,'_'))[2]
#table <- c("FirstCOD", "SecondCOD")
NumSub <- 0
unlist(strsplit(cod1,''))[1]
if (unlist(strsplit(cod1,''))[1] != unlist(strsplit(cod2,''))[1]){
NumSub = 1 + NumSub
FirstC <- unlist(strsplit(cod1,''))[1]
SecC <- unlist(strsplit(cod2,''))[1]
}
if (unlist(strsplit(cod1,''))[2] != unlist(strsplit(cod2,''))[2]){
NumSub = 1 + NumSub
FirstC <- unlist(strsplit(cod1,''))[2]
SecC <- unlist(strsplit(cod2,''))[2]
}
if (unlist(strsplit(cod1,''))[3] != unlist(strsplit(cod2,''))[3])
{
NumSub = 1 + NumSub
FirstC <- unlist(strsplit(cod1,''))[3]
SecC <- unlist(strsplit(cod2,''))[3]
}
if (NumSub == 1) {nucleotides <- paste(FirstC,SecC,sep='_')}
if (NumSub > 1)  {nucleotides  = 'MoreThanOne_SUBST'}
return(nucleotides);
}
data$Subst = apply(as.matrix(data$FirstSecond), 1, COMPAR)
withoutGapsCodonTable$Subs = data$Subst
tableSubs = withoutGapsCodonTable[withoutGapsCodonTable$Subs != 'MoreThanOne_SUBST',]
length(unique(tableSubs$Species)) #624
tableSubs$Subs = as.character(tableSubs$Subs)
mut = tableSubs[which(!(tableSubs$Subs %in% c('A_N', 'A_R', 'C_N', 'G_N', 'T_K', 'T_N', 'T_Y',
'-_A', '-_C', 'C_Y', '-_G', 'G_R', '-_T'))),]
length(unique(mut$Species)) #623
pdf('../results/cockroaches11_19/mod_HistOfSubs.pdf')
ggplot(mut, aes(x = Subs)) +
geom_histogram(stat = 'count')
Temp = mut
dev.off()
ggplot(mut, aes(x = Subs)) +
geom_histogram(stat = 'count')
Temp = mut
Temp$number = 1
Agg = aggregate(Temp$number, by = list(Temp$Subs), FUN = sum); names(Agg) = c('Subs','Number')
Agg$Number = Agg$Number/sum(Agg$Number)
ggbarplot(Agg, 'Subs', 'Number', xlab="Substitution types", title = 'all',
fill = 'Subs', color = 'Subs', palette = c("#bdbdbd", "#7fcdbb", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#feb24c", "#f03b20", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#2c7fb8", "#bdbdbd"), combine = TRUE)
unique(Agg$Subs)
mut = tableSubs[which(!(tableSubs$Subs %in% c('A_N', 'A_R', 'C_N', 'G_N', 'T_K', 'T_N', 'T_Y',
'-_A', '-_C', 'C_Y', '-_G', 'G_R', '-_T', 'A_Y'))),]
length(unique(mut$Species)) # 567
ggplot(mut, aes(x = Subs)) +
geom_histogram(stat = 'count')
Temp = mut
Temp$number = 1
Agg = aggregate(Temp$number, by = list(Temp$Subs), FUN = sum); names(Agg) = c('Subs','Number')
Agg$Number = Agg$Number/sum(Agg$Number)
ggbarplot(Agg, 'Subs', 'Number', xlab="Substitution types", title = 'all',
fill = 'Subs', color = 'Subs', palette = c("#bdbdbd", "#7fcdbb", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#feb24c", "#f03b20", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#2c7fb8", "#bdbdbd"), combine = TRUE)
table(mut$Subs)
syn = mut[as.character(mut$AncestralAA) == as.character(mut$DescendantAA),]
ggplot(syn, aes(x = Subs)) +
geom_histogram(stat = 'count') + ggtitle('Synonymous')
VecOfSynFourFoldDegenerateSites <- c('CTT', 'CTC', 'CTA', 'CTG',
'GTT', 'GTC', 'GTA', 'GTG',
'TCT', 'TCC', 'TCA', 'TCG',
'CCT', 'CCC', 'CCA', 'CCG',
'ACT', 'ACC', 'ACA', 'ACG',
'GCT', 'GCC', 'GCA', 'GCG',
'CGT', 'CGC', 'CGA', 'CGG',
'GGT', 'GGC', 'GGA', 'GGG',
'AGT', 'AGC', 'AGA', 'AGG')
length(unique(VecOfSynFourFoldDegenerateSites)) # 36
mut4f = mut[mut$AncestorCodon %in% VecOfSynFourFoldDegenerateSites & mut$DescendantCodon %in% VecOfSynFourFoldDegenerateSites,]; nrow(mut4f) # 209120
length(unique(mut4f$Species)) #593
Temp = mut4f
Temp$number = 1
Agg = aggregate(Temp$number, by = list(Temp$Subs), FUN = sum); names(Agg) = c('Subs','Number')
Agg$Number = Agg$Number/sum(Agg$Number)
ggbarplot(Agg, 'Subs', 'Number', xlab="Substitution types", title = '4-fold degenerate sites',
fill = 'Subs', color = 'Subs', palette = c("#bdbdbd", "#7fcdbb", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#feb24c", "#f03b20", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#2c7fb8", "#bdbdbd"), combine = TRUE)
pdf('../results/cockroaches11_19/mod_HistOfSubs.pdf')
ggplot(mut, aes(x = Subs)) +
geom_histogram(stat = 'count')
ggbarplot(Agg, 'Subs', 'Number', xlab="Substitution types", title = 'all',
fill = 'Subs', color = 'Subs', palette = c("#bdbdbd", "#7fcdbb", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#feb24c", "#f03b20", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#2c7fb8", "#bdbdbd"), combine = TRUE)
dev.off()
pdf('../results/cockroaches11_19/mod_HistOfSubs.pdf')
ggplot(mut, aes(x = Subs)) +
geom_histogram(stat = 'count')
Temp = mut
Temp$number = 1
Agg = aggregate(Temp$number, by = list(Temp$Subs), FUN = sum); names(Agg) = c('Subs','Number')
Agg$Number = Agg$Number/sum(Agg$Number)
ggbarplot(Agg, 'Subs', 'Number', xlab="Substitution types", title = 'all',
fill = 'Subs', color = 'Subs', palette = c("#bdbdbd", "#7fcdbb", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#feb24c", "#f03b20", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#2c7fb8", "#bdbdbd"), combine = TRUE)
ggplot(syn, aes(x = Subs)) +
geom_histogram(stat = 'count') + ggtitle('Synonymous')
Temp = mut4f
Temp$number = 1
Agg = aggregate(Temp$number, by = list(Temp$Subs), FUN = sum); names(Agg) = c('Subs','Number')
Agg$Number = Agg$Number/sum(Agg$Number)
ggbarplot(Agg, 'Subs', 'Number', xlab="Substitution types", title = '4-fold degenerate sites',
fill = 'Subs', color = 'Subs', palette = c("#bdbdbd", "#7fcdbb", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#feb24c", "#f03b20", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#2c7fb8", "#bdbdbd"), combine = TRUE)
dev.off()
View(codonTable)
