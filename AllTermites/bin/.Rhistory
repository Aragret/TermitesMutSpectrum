library(ape)
library(stringr)
library(seqinr)
tree = read.tree('../results/cockroaches11_19/phylogeny/iqtree_mito.treefile')
anc = read.table('../results/cockroaches11_19/phylogeny/iqtree_mito.state', header=TRUE)
agg = aggregate(State ~ Node, anc, paste, collapse = "")
table(anc$Node)
tree$edge
numberOfSpecies = length(tree$tip.label)
a = as.data.frame(tree$edge)
a = cbind(a, tree$edge.length)
externalBranches = a[a$V2 <= numberOfSpecies,]
externalBranches = cbind(externalBranches, tree$tip.label)
names(externalBranches) = c('Node', 'Tip', 'BranchLength', 'Species')
tree = root(tree, 'Locusta_migratoria_1')
labelsTree = as.data.frame(as.character(tree$node.label))
names(labelsTree) = 'NodeLabels'
a = do.call(rbind, str_split(labelsTree$NodeLabels, '/'))
labelsTree = cbind(labelsTree, a)
names(labelsTree) = c('NodeLabels', 'Node', 'Bootstrap', 'Bootstrap2')
ancSeqs = merge(agg, labelsTree, by='Node')
View(ancSeqs)
ancSeqs$Node = as.numeric(sub('Node', '', ancSeqs$Node))
ancSeqs$Node = ancSeqs$Node + numberOfSpecies
data = merge(ancSeqs, externalBranches, by='Node')
aligns = read.fasta('results/cockroaches11_19/align_cat.fasta', as.string = TRUE)
aligns = read.fasta('../results/cockroaches11_19/align_cat.fasta', as.string = TRUE)
a = data.frame(Species=names(aligns), Seqs=unlist(getSequence(aligns, as.string=T)))
data$Species = as.character(data$Species)
a$Species = as.character(a$Species)
# a$Species = sapply(a$Species, function(x) sub('?', '', x))
a$Species = str_replace_all(a$Species, fixed('?'), '')
a$Species = str_replace_all(a$Species, fixed(';'), '')
a$Species = str_replace_all(a$Species, fixed('__'), '_')
data$Species = str_replace_all(data$Species, fixed('__'), '_')
anc_desSeqs = merge(data, a, by='Species')
setdiff(data$Species, anc_desSeqs$Species)
View(anc_desSeqs)
codonTable = as.data.frame(NULL)
for (y in 1:nrow(anc_desSeqs)){
# y = 1
mdns <- as.character(anc_desSeqs$State[y])
msns <- toupper(as.character(anc_desSeqs$Seqs[y]))
s1 <- s2c(mdns)       #conversion of a string into a vector of chars
s2 <-  s2c(msns)
cdns1 <- splitseq(s1, 0, 3) #split a sequence into sub-sequences (codons)
cdns2 <- splitseq(s2, 0, 3)
codonposition <-c(1:length(cdns1))
final <- c()
#allframes <- c()
for (x in codonposition){
# x = 1
if (cdns1[x] != cdns2[x]){
taa1 <- translate(s2c(cdns1[x]), frame = 0, sens = "F", numcode = 5, NAstring = "X", ambiguous = FALSE)
taa2 <- translate(s2c(cdns2[x]), frame = 0, sens = "F", numcode = 5, NAstring = "X", ambiguous = FALSE)
species <- anc_desSeqs$Species[y]
print(c(species, x))
if (x > 1 & x < length(codonposition))
{
final <- rbind(final, c(species, x, cdns1[x-1], cdns1[x], cdns1[x+1], cdns2[x-1], cdns2[x], cdns2[x+1], taa1, taa2))
}
if (x == 1)
{
final <- rbind(final, c(species, x, '---', cdns1[x], cdns1[x+1], '---', cdns2[x], cdns2[x+1], taa1, taa2))
}
if (x == length(codonposition))
{
final <- rbind(final, c(species, x, cdns1[x-1], cdns1[x], '---', cdns2[x-1], cdns2[x], '---', taa1, taa2))
}
}
}
da <- data.frame(final)
colnames(da) <- c("Species", "CodonPosition", "PreviousAncCodon", "AncestorCodon", "NextAncCodon", "PreviousDesCodon", "DescendantCodon", "NextDesCodon", "AncestralAA", "DescendantAA")
codonTable = rbind(codonTable, da)
}
table(codonTable$Species)
setdiff(anc_desSeqs$Species, as.character(codonTable$Species)) # nothing !
write.table(codonTable, '../results/cockroaches11_19/PolarizeMutations.CodonsTable.Cockroaches.txt', sep = '\t', quote = FALSE, row.names = FALSE)
View(codonTable)
View(ancSeqs)
View(anc_desSeqs)
codonTable = as.data.frame(NULL)
for (y in 1:nrow(anc_desSeqs)){
# y = 1
mdns <- as.character(anc_desSeqs$State[y])
msns <- toupper(as.character(anc_desSeqs$Seqs[y]))
brLength = anc_desSeqs$BranchLength[y]
s1 <- s2c(mdns)       #conversion of a string into a vector of chars
s2 <-  s2c(msns)
cdns1 <- splitseq(s1, 0, 3) #split a sequence into sub-sequences (codons)
cdns2 <- splitseq(s2, 0, 3)
codonposition <-c(1:length(cdns1))
final <- c()
#allframes <- c()
for (x in codonposition){
# x = 1
if (cdns1[x] != cdns2[x]){
taa1 <- translate(s2c(cdns1[x]), frame = 0, sens = "F", numcode = 5, NAstring = "X", ambiguous = FALSE)
taa2 <- translate(s2c(cdns2[x]), frame = 0, sens = "F", numcode = 5, NAstring = "X", ambiguous = FALSE)
species <- anc_desSeqs$Species[y]
# print(c(species, x))
if (x > 1 & x < length(codonposition))
{
final <- rbind(final, c(species, x, cdns1[x-1], cdns1[x], cdns1[x+1], cdns2[x-1], cdns2[x], cdns2[x+1], taa1, taa2, brLength))
}
if (x == 1)
{
final <- rbind(final, c(species, x, '---', cdns1[x], cdns1[x+1], '---', cdns2[x], cdns2[x+1], taa1, taa2, brLength))
}
if (x == length(codonposition))
{
final <- rbind(final, c(species, x, cdns1[x-1], cdns1[x], '---', cdns2[x-1], cdns2[x], '---', taa1, taa2, brLength))
}
}
}
da <- data.frame(final)
colnames(da) <- c("Species", "CodonPosition", "PreviousAncCodon", "AncestorCodon", "NextAncCodon", "PreviousDesCodon", "DescendantCodon", "NextDesCodon", "AncestralAA", "DescendantAA", "BranchLength")
codonTable = rbind(codonTable, da)
}
View(codonTable)
table(codonTable$Species)
setdiff(anc_desSeqs$Species, as.character(codonTable$Species)) # nothing !
write.table(codonTable, '../results/cockroaches11_19/PolarizeMutations.CodonsTable.Cockroaches.txt', sep = '\t', quote = FALSE, row.names = FALSE)
library(ape)
library(stringr)
library(seqinr)
tree = read.tree('../results/cockroaches11_19/phylogeny/iqtree_mito.treefile')
codonTable = read.table('../results/cockroaches11_19/PolarizeMutations.CodonsTable.Cockroaches.txt', sep='\t', header=TRUE)
rm(list=ls(all=TRUE))
codonTable = read.table('../results/cockroaches11_19/PolarizeMutations.CodonsTable.Cockroaches.txt', sep='\t', header=TRUE)
withoutGapsCodonTable = codonTable[as.character(codonTable$DescendantCodon) != '---',]
length(unique(codonTable$Species)) #533
length(unique(withoutGapsCodonTable$Species)) #510
setdiff(codonTable$Species, withoutGapsCodonTable$Species)
FirstCodon = withoutGapsCodonTable$AncestorCodon
SecondCodon = withoutGapsCodonTable$DescendantCodon
data = data.frame(FirstCodon,SecondCodon)
data$FirstSecond = paste(data$FirstCodon,data$SecondCodon,sep = '_')
COMPAR<-function(x)	{
cod1 <- unlist(strsplit(x,'_'))[1]
cod2 <- unlist(strsplit(x,'_'))[2]
#table <- c("FirstCOD", "SecondCOD")
NumSub <- 0
unlist(strsplit(cod1,''))[1]
if (unlist(strsplit(cod1,''))[1] != unlist(strsplit(cod2,''))[1]){
NumSub = 1 + NumSub
FirstC <- unlist(strsplit(cod1,''))[1]
SecC <- unlist(strsplit(cod2,''))[1]
}
if (unlist(strsplit(cod1,''))[2] != unlist(strsplit(cod2,''))[2]){
NumSub = 1 + NumSub
FirstC <- unlist(strsplit(cod1,''))[2]
SecC <- unlist(strsplit(cod2,''))[2]
}
if (unlist(strsplit(cod1,''))[3] != unlist(strsplit(cod2,''))[3])
{
NumSub = 1 + NumSub
FirstC <- unlist(strsplit(cod1,''))[3]
SecC <- unlist(strsplit(cod2,''))[3]
}
if (NumSub == 1) {nucleotides <- paste(FirstC,SecC,sep='_')}
if (NumSub > 1)  {nucleotides  = 'MoreThanOne_SUBST'}
return(nucleotides);
}
data$Subst = apply(as.matrix(data$FirstSecond),1,COMPAR)
withoutGapsCodonTable$Subs = data$Subst
tableSubs = withoutGapsCodonTable[withoutGapsCodonTable$Subs != 'MoreThanOne_SUBST',]
length(unique(tableSubs$Species)) #510
tableSubs$Subs = as.character(tableSubs$Subs)
mut = tableSubs[which(!(tableSubs$Subs %in% c('A_N', 'A_R', 'C_N', 'G_N', 'T_K', 'T_N', 'T_Y',
'-_A', '-_C', 'C_Y', '-_G', 'G_R', '-_T'))),]
length(unique(mut$Species)) #510
ggplot(mut, aes(x = Subs)) +
geom_histogram(stat = 'count')
library(ggplot2)
ggplot(mut, aes(x = Subs)) +
geom_histogram(stat = 'count')
pdf('../results/cockroaches11_19/HistOfSubs.pdf')
ggplot(mut, aes(x = Subs)) +
geom_histogram(stat = 'count')
Temp = mut
Temp$number = 1
Agg = aggregate(Temp$number, by = list(Temp$Subs), FUN = sum); names(Agg) = c('Subs','Number')
Agg$Number = Agg$Number/sum(Agg$Number)
ggbarplot(Agg, 'Subs', 'Number', xlab="Substitution types", title = 'all',
fill = 'Subs', color = 'Subs', palette = c("#bdbdbd", "#7fcdbb", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#feb24c", "#f03b20", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#2c7fb8", "#bdbdbd"), combine = TRUE)
library(ggpubr)
ggbarplot(Agg, 'Subs', 'Number', xlab="Substitution types", title = 'all',
fill = 'Subs', color = 'Subs', palette = c("#bdbdbd", "#7fcdbb", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#feb24c", "#f03b20", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#2c7fb8", "#bdbdbd"), combine = TRUE)
dev.off()
table(mut$Subs)
syn = mut[as.character(mut$AncestralAA) == as.character(mut$DescendantAA),]
pdf('../results/cockroaches11_19/HistOfSubs.pdf')
ggplot(mut, aes(x = Subs)) +
geom_histogram(stat = 'count')
ggbarplot(Agg, 'Subs', 'Number', xlab="Substitution types", title = 'all',
fill = 'Subs', color = 'Subs', palette = c("#bdbdbd", "#7fcdbb", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#feb24c", "#f03b20", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#2c7fb8", "#bdbdbd"), combine = TRUE)
syn = mut[as.character(mut$AncestralAA) == as.character(mut$DescendantAA),]
ggplot(syn, aes(x = Subs)) +
geom_histogram(stat = 'count') + title('syn')
ggplot(syn, aes(x = Subs)) +
geom_histogram(stat = 'count') + ggtitle('Synonymous')
write.table(mut, '../results/cockroaches11_19/AllSubs.Cockroaches.txt', sep='\t', row.names = FALSE, quote = FALSE)
write.table(syn, '../results/cockroaches11_19/SynSubs.Cockroaches.txt', sep='\t', row.names = FALSE, quote = FALSE)
VecOfSynFourFoldDegenerateSites <- c('CTT', 'CTC', 'CTA', 'CTG',
'GTT', 'GTC', 'GTA', 'GTG',
'TCT', 'TCC', 'TCA', 'TCG',
'CCT', 'CCC', 'CCA', 'CCG',
'ACT', 'ACC', 'ACA', 'ACG',
'GCT', 'GCC', 'GCA', 'GCG',
'CGT', 'CGC', 'CGA', 'CGG',
'GGT', 'GGC', 'GGA', 'GGG',
'AGT', 'AGC', 'AGA', 'AGG')
length(unique(VecOfSynFourFoldDegenerateSites)) # 36
mut4f = mut[mut$AncestorCodon %in% VecOfSynFourFoldDegenerateSites & mut$DescendantCodon %in% VecOfSynFourFoldDegenerateSites,]; nrow(mut4f) # 209120
length(unique(mut4f$Species)) #489
Temp = mut4f
Temp$number = 1
Agg = aggregate(Temp$number, by = list(Temp$Subs), FUN = sum); names(Agg) = c('Subs','Number')
Agg$Number = Agg$Number/sum(Agg$Number)
ggbarplot(Agg, 'Subs', 'Number', xlab="Substitution types", title = '4-fold degenerate sites',
fill = 'Subs', color = 'Subs', palette = c("#bdbdbd", "#7fcdbb", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#feb24c", "#f03b20", "#bdbdbd", "#bdbdbd", "#bdbdbd", "#2c7fb8", "#bdbdbd"), combine = TRUE)
write.table(mut4f, '../results/cockroaches11_19/4foldSubs.Cockroaches.txt', sep='\t', row.names = FALSE, quote = FALSE)
table(mut4f$Species)
dev.off()
rm(list=ls(all=TRUE))
mut = read.table('../results/cockroaches11_19/4foldSubs.Cockroaches.txt', header = TRUE, sep='\t')
library(gdata)
families = read.xls('../results/4foldSubsBrLen02Fractions.xlsx')
View(families)
View(families)
View(mut)
mutBrLen02 = mut[mut$BranchLength >= 0.02,]
mut$Subs = as.character(mut$Subs)
speciesNumber = length(unique(mut$Species))
mutTable = setNames(data.frame(matrix(0, ncol = 12, nrow = speciesNumber)), unique(mut$Subs))
Species = unique(mut$Species)
mutTable = cbind(Species, mutTable)
for(i in 1:nrow(mut)){
row = mut[i, ]
mutTable[mutTable$Species == row$Species, row$Subs] = mutTable[mutTable$Species == row$Species, row$Subs] + 1
}
View(mut)
View(mutTable)
table(mut[mut$Species == '3.10.3_Amitermes_capito_1',])
table(mut[mut$Species == "AUS49_Tumulitermes_sp._1",]$Subs)
mutTable[mutTable$Species == 'AUS49_Tumulitermes_sp._1',]
View(mutTable)
mutTableBrlen = merge(mutTable, mut[, c('Species', 'BranchLength')])
mutTableBrlen = merge(mutTable, mut[, c('Species', 'BranchLength')], all.x = TRUE)
mutTableBrlen = merge(mutTable, mut[, c('Species', 'BranchLength')], all.x = TRUE, all.y = FALSE)
View(mutTableBrlen)
mutTableBrlen = merge(mutTable, mut[, c('Species', 'BranchLength')], all.y = FALSE)
brLen = aggregate(mut$BranchLength, by=list(unique(mut$Species)), mean)
brLen = aggregate(mut$BranchLength, by=list(mut$Species), mean)
View(brLen)
names(brLen) = c('Species', 'BranchLength')
brLen = as.data.frame(unique(mut$Species), unique(mut$BranchLength))
View(brLen)
brLen = as.data.frame(Species = unique(mut$Species), BranchLength = unique(mut$BranchLength))
brLen = aggregate(mut$BranchLength, by=list(mut$Species), unique())
brLen = aggregate(mut$BranchLength, by=list(mut$Species), unique)
names(brLen) = c('Species', 'BranchLength')
View(brLen)
mutTableBrlen = merge(mutTable, brLen)
View(mutTableBrlen)
a = matrix(0, ncol=12, nrow=nrow(mut))
mutTableBrlen$sumOfSubs = mutTableBrlen[, "C_T"] + mutTableBrlen[, "A_G"] + mutTableBrlen[, "T_C"] + mutTableBrlen[, "G_T"] + mutTableBrlen[, "A_C"] +
mutTableBrlen[, "G_A"] + mutTableBrlen[, "A_T"] + mutTableBrlen[, "G_C"] + mutTableBrlen[, "C_A"] + mutTableBrlen[, "C_G"] + mutTableBrlen[, "T_A"] +
mutTableBrlen[, "T_G"]
View(mut)
View(mutTableBrlen)
for(i in 1:12){
a[, i] = mutTableBrlen[, i+1] / mutTableBrlen$sumOfSubs
}
a = matrix(0, ncol=12, nrow=nrow(mutTableBrlen))
for(i in 1:12){
a[, i] = mutTableBrlen[, i+1] / mutTableBrlen$sumOfSubs
}
View(a)
fractions = as.data.frame(a)
names(fractions) = sub(' ', '', paste(names(mut[, 2:13]), '_fr'))
names(fractions) = sub(' ', '', paste(names(mutTableBrlen[, 2:13]), '_fr'))
View(fractions)
mutFr = cbind(mutTableBrlen, fractions)
View(mutFr)
cor.test(mutFr$BranchLength, mutFr$sumOfSubs)
plot(mutFr$BranchLength, mutFr$sumOfSubs)
cor.test(mutFr$BranchLength, mutFr$A_G_fr)
cor.test(mutFr$BranchLength, mutFr$C_T_fr)
plot(mutFr$BranchLength, mutFr$C_T_fr)
summary(mutFr$BranchLength)
mutFrBrlen02 = mutFr[mutFr$BranchLength >= 0.02,]
cor.test(mutFrBrlen02$BranchLength, mutFrBrlen02$sumOfSubs)
plot(mutFrBrlen02$BranchLength, mutFrBrlen02$sumOfSubs)
cor.test(mutFrBrlen02$BranchLength, mutFrBrlen02$C_T_fr)
plot(mutFrBrlen02$BranchLength, mutFrBrlen02$C_T_fr)
summary(mutFrBrlen02$BranchLength)
names(families)
data = merge(mutFrBrlen02, families[, 'Species', 'Taxonomy', 'Worker', 'diet.wood.soil'])
data = merge(mutFrBrlen02, families[, 'Species', 'Taxonomy', 'Worker', 'diet.wood.soil'], by='Species')
data = merge(mutFrBrlen02, families[, c('Species', 'Taxonomy', 'Worker', 'diet.wood.soil')], by='Species')
data = merge(mutFrBrlen02, families[, c('Species', 'Taxonomy', 'Worker', 'diet.wood.soil')], by='Species', all.x = TRUE)
View(data)
cor.test(mutFrBrlen02$BranchLength, mutFrBrlen02$C_T_fr)
cor.test(mutFrBrlen02$sumOfSubs, mutFrBrlen02$C_T_fr)
View(mutFrBrlen02)
names(mutFrBrlen02)[16]
for(i in 16:27){
names(mutFrBrlen02)[i]
print(cor.test(mutFrBrlen02[, i], mutFrBrlen02$BranchLength))
}
for(i in 16:27){
print(names(mutFrBrlen02)[i])
print(cor.test(mutFrBrlen02[, i], mutFrBrlen02$BranchLength))
}
View(data)
write.table(data, '../results/cockroaches11_19/4foldSubsBrLen02Fractions.Cockroaches.txt', sep='\t', quote = FALSE, row.names = FALSE)
